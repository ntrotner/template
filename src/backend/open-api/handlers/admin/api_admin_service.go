/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 */

package openapi

import (
	"context"
	"net/http"
	database_metadata "template_backend/database/paths/metadata"
	database_user "template_backend/database/paths/user"
	api_authentication "template_backend/open-api/authentication"
	models "template_backend/open-api/models"

	"github.com/rs/zerolog/log"
)

// AdminAPIRouter defines the required methods for binding the api requests to a responses for the AdminAPI
// The AdminAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AdminAPIServicer to perform the required actions, then write the service results to the http response.
type AdminAPIRouter interface {
	AdminGetUsers(http.ResponseWriter, *http.Request)
	ChangeRole(http.ResponseWriter, *http.Request)
	AdminGetMetadata(http.ResponseWriter, *http.Request)
	AdminChangeMetadata(http.ResponseWriter, *http.Request)
}

// AdminAPIServicer defines the api actions for the AdminAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AdminAPIServicer interface {
	AdminGetUsers(context.Context, *http.Request) (models.ImplResponse, error)
	ChangeRole(context.Context, models.AdminChangeRole, *http.Request) (models.ImplResponse, error)
	AdminGetMetadata(context.Context, *http.Request) (models.ImplResponse, error)
	AdminChangeMetadata(context.Context, []models.MetadataItem, *http.Request) (models.ImplResponse, error)
}

// AdminAPIService is a service that implements the logic for the AdminAPIServicer
// This service should implement the business logic for every endpoint for the AdminAPI API.
// Include any external packages or services that will be required by this service.
type AdminAPIService struct {
}

// NewAdminAPIService creates a default api service
func NewAdminAPIService() *AdminAPIService {
	return &AdminAPIService{}
}

// AdminGetUsers - Get user roles
func (s *AdminAPIService) AdminGetUsers(ctx context.Context, r *http.Request) (models.ImplResponse, error) {
	user, err := api_authentication.IsAdmin(ctx, r)
	if err != nil || user == nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}
	users := database_user.GetAllUsers(ctx)

	usersResponse := []models.UserProfile{}
	for _, user := range users {
		usersResponse = append(usersResponse, models.UserProfile{Email: user.Email, Role: models.UserRoles(user.Roles)})
	}
	return models.Response(200, models.AdminUsers{Users: usersResponse}), nil
}

// ChangeRole - Change user role
func (s *AdminAPIService) ChangeRole(ctx context.Context, changeRole models.AdminChangeRole, r *http.Request) (models.ImplResponse, error) {
	user, err := api_authentication.IsAdmin(ctx, r)
	if err != nil || user == nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}
	database_user.ChangeUserRole(ctx, &user.ID, database_user.UserRole(changeRole.NewRole))
	return models.Response(200, models.Success{}), nil
}

// AdminGetMetadata - Get backend metadata
func (s *AdminAPIService) AdminGetMetadata(ctx context.Context, r *http.Request) (models.ImplResponse, error) {
	user, err := api_authentication.IsAdmin(ctx, r)
	if err != nil || user == nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}
	metadataItems, err := database_metadata.GetMetadata(ctx)
	if err != nil {
		log.Error().Msg(err.Error())
		return models.Response(500, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Internal server error."}}}), nil
	}

	metadata := []models.MetadataItem{}
	for _, item := range metadataItems {
		metadata = append(metadata, models.MetadataItem{Key: item.Key, Value: item.Value, AdminOnly: item.AdminOnly})
	}

	return models.Response(200, metadata), nil
}

// AdminChangeMetadata - Change backend metadata
func (s *AdminAPIService) AdminChangeMetadata(ctx context.Context, metadataItem []models.MetadataItem, r *http.Request) (models.ImplResponse, error) {
	user, err := api_authentication.IsAdmin(ctx, r)
	if err != nil || user == nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}

	errors := []models.Message{}

	for _, item := range metadataItem {
		err := database_metadata.UpdateMetadata(ctx, database_metadata.MetadataItem{Key: item.Key, Value: item.Value, AdminOnly: item.AdminOnly})
		if err != nil {
			errors = append(errors, models.Message{Code: "001", Message: err.Error()})
		}
	}

	if len(errors) > 0 {
		return models.Response(400, models.Error{ErrorMessages: errors}), nil
	}

	return models.Response(200, models.Success{}), nil
}
