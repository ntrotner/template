/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 */

package openapi

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
	models "template_backend/open-api/models"
	runtime "template_backend/open-api/runtime"
)

// AdminAPIController binds http requests to an api service and writes the service results to the http response
type AdminAPIController struct {
	service      AdminAPIServicer
	errorHandler runtime.ErrorHandler
}

// AdminAPIOption for how the controller is set up.
type AdminAPIOption func(*AdminAPIController)

// WithAdminAPIErrorHandler inject ErrorHandler into controller
func WithAdminAPIErrorHandler(h runtime.ErrorHandler) AdminAPIOption {
	return func(c *AdminAPIController) {
		c.errorHandler = h
	}
}

// NewAdminAPIController creates a default api controller
func NewAdminAPIController(s AdminAPIServicer, opts ...AdminAPIOption) *AdminAPIController {
	controller := &AdminAPIController{
		service:      s,
		errorHandler: runtime.DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdminAPIController
func (c *AdminAPIController) Routes() runtime.Routes {
	return runtime.Routes{
		"AdminGetUsers": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/admin/users",
			HandlerFunc: c.AdminGetUsers,
		},
		"ChangeRole": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/admin/change-role",
			HandlerFunc: c.ChangeRole,
		},
		"AdminGetMetadata": runtime.Route{
			Method:      strings.ToUpper("Get"),
			Pattern:     "/admin/metadata",
			HandlerFunc: c.AdminGetMetadata,
		},
		"AdminChangeMetadata": runtime.Route{
			Method:      strings.ToUpper("Post"),
			Pattern:     "/admin/change-metadata",
			HandlerFunc: c.AdminChangeMetadata,
		},
	}
}

// AdminGetUsers - Get user roles
func (c *AdminAPIController) AdminGetUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AdminGetUsers(r.Context(), r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// ChangeRole - Change user role
func (c *AdminAPIController) ChangeRole(w http.ResponseWriter, r *http.Request) {
	var adminChangeRoleParam models.AdminChangeRole
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&adminChangeRoleParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	if err := models.AssertAdminChangeRoleRequired(adminChangeRoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := models.AssertAdminChangeRoleConstraints(adminChangeRoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangeRole(r.Context(), adminChangeRoleParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdminGetMetadata - Get backend metadata
func (c *AdminAPIController) AdminGetMetadata(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.AdminGetMetadata(r.Context(), r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}

// AdminChangeMetadata - Change backend metadata
func (c *AdminAPIController) AdminChangeMetadata(w http.ResponseWriter, r *http.Request) {
	var metadataItemParam []models.MetadataItem
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&metadataItemParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &models.ParsingError{Err: err}, nil)
		return
	}
	for _, el := range metadataItemParam {
		if err := models.AssertMetadataItemRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.AdminChangeMetadata(r.Context(), metadataItemParam, r)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = runtime.EncodeJSONResponse(result.Body, &result.Code, w)
}
