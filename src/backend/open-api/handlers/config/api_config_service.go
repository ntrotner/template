/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 */

package openapi

import (
	"context"
	"net/http"
	"template_backend/core/config"
	models "template_backend/open-api/models"
)

// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface {
	Config(http.ResponseWriter, *http.Request)
}

// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface {
	Config(context.Context) (models.ImplResponse, error)
}

// ConfigAPIService is a service that implements the logic for the ConfigAPIServicer
// This service should implement the business logic for every endpoint for the ConfigAPI API.
// Include any external packages or services that will be required by this service.
type ConfigAPIService struct {
}

// NewConfigAPIService creates a default api service
func NewConfigAPIService() *ConfigAPIService {
	return &ConfigAPIService{}
}

// Config - Retrieve backend config
func (s *ConfigAPIService) Config(ctx context.Context) (models.ImplResponse, error) {
	return models.Response(200, models.Config{
		App: models.AppConfig{
			IsBackendAware: config.GlobalConfig.Shared.App.IsBackendAware,
			User:           config.GlobalConfig.Shared.App.User,
			AdminOnly:      config.GlobalConfig.Shared.App.AdminOnly,
			Navigation:     config.GlobalConfig.Shared.App.Navigation,
		},
		Logger: models.LoggerConfig{
			Url: config.GlobalConfig.Shared.Logger.URL,
		},
	}), nil
}
