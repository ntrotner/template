/*
 * Swagger - OpenAPI 3.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Contact: nikita@ttnr.me
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"template_backend/core/config"
	database_user "template_backend/database/paths/user"
	authentication "template_backend/infrastructure/authentication"
	api_authentication "template_backend/open-api/authentication"
	models "template_backend/open-api/models"

	"github.com/rs/zerolog/log"
)

// AuthenticationAPIService is a service that implements the logic for the AuthenticationAPIServicer
// This service should implement the business logic for every endpoint for the AuthenticationAPI API.
// Include any external packages or services that will be required by this service.
type AuthenticationAPIService struct {
}

// NewAuthenticationAPIService creates a default api service
func NewAuthenticationAPIService() AuthenticationAPIServicer {
	return &AuthenticationAPIService{}
}

// LoginPost - User login
func (s *AuthenticationAPIService) LoginPost(ctx context.Context, userLogin models.UserLogin, w http.ResponseWriter) (models.ImplResponse, error) {
	user := database_user.AuthenticateUser(ctx, userLogin.Email, userLogin.Password)
	if user == nil {
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	if config.GlobalConfig.Shared.App.AdminOnly && user.Role != database_user.AdminUser {
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	log.Info().Msgf("User authenticated: %s", user.ID)

	tokenString, _, err := authentication.CreateJWT(&user.ID)
	if err != nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	api_authentication.WriteTokenToHeader(&tokenString, w)
	return models.Response(200, models.Success{}), nil
}

// LogoutPost - User logout
func (s *AuthenticationAPIService) LogoutPost(ctx context.Context, r *http.Request) (models.ImplResponse, error) {
	r.Header.Del("Authorization")
	return models.Response(200, models.Success{}), nil
}

// RefreshTokenPost - Refresh authentication token
func (s *AuthenticationAPIService) RefreshTokenPost(ctx context.Context, w http.ResponseWriter, r *http.Request) (models.ImplResponse, error) {
	user, err := api_authentication.IsUserAuthorized(ctx, r)
	if err != nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized."}}}), nil
	}

	tokenString, _, err := authentication.CreateJWT(&user.ID)
	if err != nil {
		log.Error().Msg(err.Error())
		return models.Response(401, models.Error{ErrorMessages: []models.Message{{Code: "100", Message: "Unauthorized. Please check your credentials."}}}), nil
	}

	api_authentication.WriteTokenToHeader(&tokenString, w)
	return models.Response(200, models.Success{}), nil
}

// RegisterPost - Register a new user
func (s *AuthenticationAPIService) RegisterPost(ctx context.Context, userRegistration models.UserRegistration, w http.ResponseWriter) (models.ImplResponse, error) {
	existsEmail := database_user.ExistsEmail(ctx, userRegistration.Email)
	if existsEmail {
		return models.Response(400, models.Error{ErrorMessages: []models.Message{{Code: "101", Message: "Bad request. Please check your input data."}}}), nil
	}

	user, err := database_user.CreateUser(ctx, userRegistration.Email, userRegistration.Password)
	if err != nil {
		return models.Response(400, models.Error{ErrorMessages: []models.Message{{Code: "101", Message: "Bad request. Please check your input data."}}}), nil
	}

	signedJWT, _, err := authentication.CreateJWT(&user.ID)
	if err != nil {
		log.Error().Msg(err.Error())
		return models.Response(400, models.Error{ErrorMessages: []models.Message{{Code: "101", Message: "Bad request. Please check your input data."}}}), nil
	}
	api_authentication.WriteTokenToHeader(&signedJWT, w)
	return models.Response(200, models.Success{}), nil
}
