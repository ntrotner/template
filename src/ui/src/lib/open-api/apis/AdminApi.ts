/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminChangeRole,
  AdminUsers,
  MetadataItem,
  Success,
} from '../models/index';
import {
    AdminChangeRoleFromJSON,
    AdminChangeRoleToJSON,
    AdminUsersFromJSON,
    AdminUsersToJSON,
    MetadataItemFromJSON,
    MetadataItemToJSON,
    SuccessFromJSON,
    SuccessToJSON,
} from '../models/index';

export interface AdminChangeMetadataRequest {
    metadataItem?: Array<MetadataItem>;
}

export interface ChangeRoleRequest {
    adminChangeRole?: AdminChangeRole;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Change backend metadata
     */
    async adminChangeMetadataRaw(requestParameters: AdminChangeMetadataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/change-metadata`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['metadataItem']!.map(MetadataItemToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Change backend metadata
     */
    async adminChangeMetadata(requestParameters: AdminChangeMetadataRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.adminChangeMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get backend metadata
     */
    async adminGetMetadataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MetadataItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/metadata`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetadataItemFromJSON));
    }

    /**
     * Get backend metadata
     */
    async adminGetMetadata(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MetadataItem>> {
        const response = await this.adminGetMetadataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user roles
     */
    async adminGetUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUsersFromJSON(jsonValue));
    }

    /**
     * Get user roles
     */
    async adminGetUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsers> {
        const response = await this.adminGetUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Change user role
     */
    async changeRoleRaw(requestParameters: ChangeRoleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/change-role`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminChangeRoleToJSON(requestParameters['adminChangeRole']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Change user role
     */
    async changeRole(requestParameters: ChangeRoleRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.changeRoleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
