/* tslint:disable */
/* eslint-disable */
/**
 * Swagger - OpenAPI 3.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nikita@ttnr.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChangeEmail,
  ChangePassword,
  PasswordReset,
  Success,
  UserProfile,
} from '../models/index';
import {
    ChangeEmailFromJSON,
    ChangeEmailToJSON,
    ChangePasswordFromJSON,
    ChangePasswordToJSON,
    PasswordResetFromJSON,
    PasswordResetToJSON,
    SuccessFromJSON,
    SuccessToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface ChangeEmailPostRequest {
    changeEmail?: ChangeEmail;
}

export interface ChangePasswordPostRequest {
    changePassword?: ChangePassword;
}

export interface PasswordResetPostRequest {
    passwordReset?: PasswordReset;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     * Change user email
     */
    async changeEmailPostRaw(requestParameters: ChangeEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/change-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeEmailToJSON(requestParameters['changeEmail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Change user email
     */
    async changeEmailPost(requestParameters: ChangeEmailPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.changeEmailPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change user password
     */
    async changePasswordPostRaw(requestParameters: ChangePasswordPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/change-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChangePasswordToJSON(requestParameters['changePassword']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Change user password
     */
    async changePasswordPost(requestParameters: ChangePasswordPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.changePasswordPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Initiate password reset
     */
    async passwordResetPostRaw(requestParameters: PasswordResetPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/password-reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetToJSON(requestParameters['passwordReset']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Initiate password reset
     */
    async passwordResetPost(requestParameters: PasswordResetPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.passwordResetPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get user profile
     */
    async profileGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * Get user profile
     */
    async profileGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.profileGetRaw(initOverrides);
        return await response.value();
    }

}
