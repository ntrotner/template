openapi: 3.0.3
info:
  title: Swagger - OpenAPI 3.0
  contact:
    email: nikita@ttnr.me
  version: 1.0.0
servers:
  - url: http://api.template.de/
    description: Dev server
  - url: https://euw.backend.example.com/
    description: Prod server
tags:
  - name: admin
    description: Admin controls
  - name: config
    description: Provide backend configuration
  - name: authentication
    description: Authenticate users
  - name: user
    description: Modify and retrieve user settings
  - name: status
    description: Check application health
paths:
  /health:
    get:
      tags:
        - status
      summary: Check health of server
      operationId: health
      responses:
        '200':
          $ref: '#/components/responses/Health'
        '500':
          $ref: '#/components/responses/Health'
  /admin/users:
    get:
      tags:
        - admin
      summary: Get user roles
      operationId: adminGetUsers
      responses:
        '200':
          $ref: '#/components/responses/AdminUsers'
        '400':
          $ref: '#/components/responses/Error'
  /admin/change-role:
    post:
      tags:
        - admin
      summary: Change user role
      operationId: changeRole
      responses:
        '200':
          $ref: '#/components/responses/AdminChangeRole'
        '400':
          $ref: '#/components/responses/Error'
  /admin/metadata:
    get:
      tags:
        - admin
      summary: Get backend metadata
      operationId: adminGetMetadata
      responses:
        '200':
          $ref: '#/components/responses/AdminMetadata'
        '400':
          $ref: '#/components/responses/Error'
  /admin/change-metadata:
    post:
      tags:
        - admin
      summary: Change backend metadata
      operationId: adminChangeMetadata
      responses:
        '200':
          $ref: '#/components/responses/AdminChangeMetadata'
        '400':
          $ref: '#/components/responses/Error'
  /config:
    get:
      tags:
        - config
      summary: Retrieve backend config
      operationId: config
      responses:
        '200':
          $ref: '#/components/responses/Config'
        '500':
          $ref: '#/components/responses/Error'
  /register:
    post:
      tags:
        - authentication
      summary: Register a new user
      requestBody:
        $ref: '#/components/requestBodies/UserRegistration'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
  /login:
    post:
      tags:
        - authentication
      summary: User login
      requestBody:
        $ref: '#/components/requestBodies/UserLogin'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '401':
          $ref: '#/components/responses/Error'
  /refresh-token:
    post:
      tags:
        - authentication
      summary: Refresh authentication token
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /logout:
    post:
      tags:
        - authentication
      summary: User logout
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
  /profile:
    get:
      tags:
        - user
      summary: Get user profile
      responses:
        '200':
          $ref: '#/components/responses/UserProfile'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /password-reset:
    post:
      tags:
        - user
      summary: Initiate password reset
      requestBody:
        $ref: '#/components/requestBodies/PasswordReset'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /change-password:
    post:
      tags:
        - user
      summary: Change user password
      requestBody:
        $ref: '#/components/requestBodies/ChangePassword'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
  /change-email:
    post:
      tags:
        - user
      summary: Change user email
      requestBody:
        $ref: '#/components/requestBodies/ChangeEmail'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Success:
      description: Success
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    Error:
      description: Error messages
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AdminUsers:
      description: Get all users
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminUsers'
    AdminMetadata:
      description: Admin metadata
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Metadata'
    AdminChangeMetadata:
      description: Admin change metadata
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminChangeMetadata'
    AdminChangeRole:
      description: Change role
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AdminChangeRole'
    Config:
      description: Config
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Config'
    UserProfile:
      description: User profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserProfile'
    Health:
      description: Health
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Health'
  requestBodies:
    UserRegistration:
      description: User registration
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserRegistration'
    UserLogin:
      description: User login
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserLogin'
    PasswordReset:
      description: Password reset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PasswordReset'
    ChangePassword:
      description: Password change
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassword'
    ChangeEmail:
      description: Email change
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangeEmail'
  schemas:
    Success:
      type: object
      properties:
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        warningMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Error:
      type: object
      properties:
        warningMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        errorMessages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
    Message:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    Health:
      type: object
      properties:
        server:
          type: boolean
        db:
          type: boolean
    AdminUsers:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfile'
    AdminChangeMetadata:
      type: array
      items:
        $ref: '#/components/schemas/MetadataItem'
    Metadata:
      type: array
      items:
        $ref: '#/components/schemas/MetadataItem'
    MetadataItem:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
    AdminChangeRole:
      type: object
      properties:
        email:
          type: string
        newRole:
          $ref: '#/components/schemas/UserRoles'
    Config:
      type: object
      properties:
        app:
          $ref: '#/components/schemas/AppConfig'
        logger:
          $ref: '#/components/schemas/LoggerConfig'
      required:
        - app
        - logger
    AppConfig:
      type: object
      properties:
        isBackendAware:
          type: boolean
        user:
          type: boolean
        adminOnly:
          type: boolean
        navigation:
          type: string
          enum:
            - bulky
            - slim
            - none
      required:
        - isBackendAware
        - user
        - navigation
    LoggerConfig:
      type: object
      properties:
        url:
          type: string
      required:
        - url
    UserProfile:
      type: object
      properties:
        email:
          type: string
        role:
          $ref: '#/components/schemas/UserRoles'
      required:
        - email
        - role
    UserRoles:
      type: string
      enum:
        - admin
        - user
        - unconfirmed
    UserRegistration:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - email
        - password
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - email
        - password
    PasswordReset:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    ChangePassword:
      type: object
      properties:
        currentPassword:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
        newPassword:
          type: string
          minLength: 8
          maxLength: 64
          pattern: "^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!@#$%^&*()_+{}|:<>?~]).*$"
          format: password
      required:
        - currentPassword
        - newPassword
    ChangeEmail:
      type: object
      properties:
        currentEmail:
          type: string
        newEmail:
          type: string
      required:
        - currentEmail
        - newEmail